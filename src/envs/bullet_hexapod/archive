        # self.joint_angle_arr_list.append(joint_angles)
        # joint_angle_arr_recent = np.array(self.joint_angle_arr_list[-15 - np.random.randint(0,20):])
        # joint_angle_arr_quantiles = np.quantile(joint_angle_arr_recent, [0.25,0.5,0.75], axis=0)
        # left_quantiles = joint_angle_arr_quantiles[:, self.left_joints_ids]
        # right_quantiles = joint_angle_arr_quantiles[:, self.right_joints_ids]
        # quantile_pen = np.mean(np.square(left_quantiles - right_quantiles))

        # Calculate work done by each motor
        #joint_work_done_arr = np.array(joint_torques) * np.array(joint_velocities)
        #self.joint_work_done_arr_list.append(joint_work_done_arr)

        # Instantaneous work penalties
        # coxa_work_pen = np.mean(np.square(joint_work_done_arr[self.coxa_joint_ids]))
        # femur_work_pen = np.mean(np.square(joint_work_done_arr[self.femur_joint_ids]))
        # tibia_work_pen = np.mean(np.square(joint_work_done_arr[self.tibia_joint_ids]))
        # total_work_pen = np.mean(np.square(joint_work_done_arr))

        # Cumulative mean work done per joint
        #joint_work_done_arr_recent = np.array(self.joint_work_done_arr_list[-15 - np.random.randint(0,20):])
        #joint_work_done_floating_avg = np.mean(joint_work_done_arr_recent, axis=0)

        # Symmetry penalty
        #left_work_mean = joint_work_done_floating_avg[self.left_joints_ids]
        #right_work_mean = joint_work_done_floating_avg[self.right_joints_ids]
        #symmetry_work_pen = np.mean(np.square(left_work_mean - right_work_mean))

        # Unsuitable position penalty
        # unsuitable_position_pen = 0
        # leg_pen = []
        # for i in range(6):
        #     _, a1, a2 = scaled_joint_angles_true[i * 3: i * 3 + 3]
        #     pen = np.maximum((np.sign(a1) * (a1 ** 2)) * (np.sign(a2) * (a2 ** 2)), 0)
        #     unsuitable_position_pen += pen
        #     leg_pen.append(pen)

        # Contact penalty
        #contact_rew = np.mean((np.array(contacts) + 1. / 2.))

        # Torso contact penalty
        #torso_contact_pen = (ctct_torso * 0.5 + 0.5)
